package com.newframework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property AskNumber = new Property(1, String.class, "askNumber", false, "ASK_NUMBER");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Department = new Property(3, String.class, "department", false, "DEPARTMENT");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property District = new Property(5, String.class, "district", false, "DISTRICT");
        public final static Property EducationTitle = new Property(6, String.class, "educationTitle", false, "EDUCATION_TITLE");
        public final static Property HelpCount = new Property(7, String.class, "helpCount", false, "HELP_COUNT");
        public final static Property Hospital = new Property(8, String.class, "hospital", false, "HOSPITAL");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property Province = new Property(11, String.class, "province", false, "PROVINCE");
        public final static Property QaCount = new Property(12, String.class, "qaCount", false, "QA_COUNT");
        public final static Property QrCode = new Property(13, String.class, "qrCode", false, "QR_CODE");
        public final static Property Role = new Property(14, String.class, "role", false, "ROLE");
        public final static Property Score = new Property(15, String.class, "score", false, "SCORE");
        public final static Property Title = new Property(16, String.class, "title", false, "TITLE");
        public final static Property WorkYear = new Property(17, String.class, "workYear", false, "WORK_YEAR");
        public final static Property Phone = new Property(18, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(19, String.class, "sex", false, "SEX");
        public final static Property Birth = new Property(20, String.class, "birth", false, "BIRTH");
        public final static Property Experience = new Property(21, String.class, "experience", false, "EXPERIENCE");
        public final static Property Good = new Property(22, String.class, "good", false, "GOOD");
        public final static Property Doccard = new Property(23, String.class, "doccard", false, "DOCCARD");
        public final static Property Cardimg = new Property(24, String.class, "cardimg", false, "CARDIMG");
        public final static Property DocNo = new Property(25, String.class, "docNo", false, "DOC_NO");
        public final static Property FlowerNumber = new Property(26, String.class, "flowerNumber", false, "FLOWER_NUMBER");
        public final static Property LastAsk = new Property(27, String.class, "lastAsk", false, "LAST_ASK");
        public final static Property Status = new Property(28, String.class, "status", false, "STATUS");
        public final static Property RegFee = new Property(29, String.class, "regFee", false, "REG_FEE");
        public final static Property AppointmentFlag = new Property(30, String.class, "appointmentFlag", false, "APPOINTMENT_FLAG");
        public final static Property AppointmentTimes = new Property(31, String.class, "appointmentTimes", false, "APPOINTMENT_TIMES");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: userId
                "\"ASK_NUMBER\" TEXT," + // 1: askNumber
                "\"CITY\" TEXT," + // 2: city
                "\"DEPARTMENT\" TEXT," + // 3: department
                "\"DESC\" TEXT," + // 4: desc
                "\"DISTRICT\" TEXT," + // 5: district
                "\"EDUCATION_TITLE\" TEXT," + // 6: educationTitle
                "\"HELP_COUNT\" TEXT," + // 7: helpCount
                "\"HOSPITAL\" TEXT," + // 8: hospital
                "\"IMAGE\" TEXT," + // 9: image
                "\"NAME\" TEXT," + // 10: name
                "\"PROVINCE\" TEXT," + // 11: province
                "\"QA_COUNT\" TEXT," + // 12: qaCount
                "\"QR_CODE\" TEXT," + // 13: qrCode
                "\"ROLE\" TEXT," + // 14: role
                "\"SCORE\" TEXT," + // 15: score
                "\"TITLE\" TEXT," + // 16: title
                "\"WORK_YEAR\" TEXT," + // 17: workYear
                "\"PHONE\" TEXT," + // 18: phone
                "\"SEX\" TEXT," + // 19: sex
                "\"BIRTH\" TEXT," + // 20: birth
                "\"EXPERIENCE\" TEXT," + // 21: experience
                "\"GOOD\" TEXT," + // 22: good
                "\"DOCCARD\" TEXT," + // 23: doccard
                "\"CARDIMG\" TEXT," + // 24: cardimg
                "\"DOC_NO\" TEXT," + // 25: docNo
                "\"FLOWER_NUMBER\" TEXT," + // 26: flowerNumber
                "\"LAST_ASK\" TEXT," + // 27: lastAsk
                "\"STATUS\" TEXT," + // 28: status
                "\"REG_FEE\" TEXT," + // 29: regFee
                "\"APPOINTMENT_FLAG\" TEXT," + // 30: appointmentFlag
                "\"APPOINTMENT_TIMES\" TEXT);"); // 31: appointmentTimes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String askNumber = entity.getAskNumber();
        if (askNumber != null) {
            stmt.bindString(2, askNumber);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(6, district);
        }
 
        String educationTitle = entity.getEducationTitle();
        if (educationTitle != null) {
            stmt.bindString(7, educationTitle);
        }
 
        String helpCount = entity.getHelpCount();
        if (helpCount != null) {
            stmt.bindString(8, helpCount);
        }
 
        String hospital = entity.getHospital();
        if (hospital != null) {
            stmt.bindString(9, hospital);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(12, province);
        }
 
        String qaCount = entity.getQaCount();
        if (qaCount != null) {
            stmt.bindString(13, qaCount);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(14, qrCode);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(15, role);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(16, score);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(17, title);
        }
 
        String workYear = entity.getWorkYear();
        if (workYear != null) {
            stmt.bindString(18, workYear);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(19, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(20, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(21, birth);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(22, experience);
        }
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(23, good);
        }
 
        String doccard = entity.getDoccard();
        if (doccard != null) {
            stmt.bindString(24, doccard);
        }
 
        String cardimg = entity.getCardimg();
        if (cardimg != null) {
            stmt.bindString(25, cardimg);
        }
 
        String docNo = entity.getDocNo();
        if (docNo != null) {
            stmt.bindString(26, docNo);
        }
 
        String flowerNumber = entity.getFlowerNumber();
        if (flowerNumber != null) {
            stmt.bindString(27, flowerNumber);
        }
 
        String lastAsk = entity.getLastAsk();
        if (lastAsk != null) {
            stmt.bindString(28, lastAsk);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(29, status);
        }
 
        String regFee = entity.getRegFee();
        if (regFee != null) {
            stmt.bindString(30, regFee);
        }
 
        String appointmentFlag = entity.getAppointmentFlag();
        if (appointmentFlag != null) {
            stmt.bindString(31, appointmentFlag);
        }
 
        String appointmentTimes = entity.getAppointmentTimes();
        if (appointmentTimes != null) {
            stmt.bindString(32, appointmentTimes);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String askNumber = entity.getAskNumber();
        if (askNumber != null) {
            stmt.bindString(2, askNumber);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(6, district);
        }
 
        String educationTitle = entity.getEducationTitle();
        if (educationTitle != null) {
            stmt.bindString(7, educationTitle);
        }
 
        String helpCount = entity.getHelpCount();
        if (helpCount != null) {
            stmt.bindString(8, helpCount);
        }
 
        String hospital = entity.getHospital();
        if (hospital != null) {
            stmt.bindString(9, hospital);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(12, province);
        }
 
        String qaCount = entity.getQaCount();
        if (qaCount != null) {
            stmt.bindString(13, qaCount);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(14, qrCode);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(15, role);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(16, score);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(17, title);
        }
 
        String workYear = entity.getWorkYear();
        if (workYear != null) {
            stmt.bindString(18, workYear);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(19, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(20, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(21, birth);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(22, experience);
        }
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(23, good);
        }
 
        String doccard = entity.getDoccard();
        if (doccard != null) {
            stmt.bindString(24, doccard);
        }
 
        String cardimg = entity.getCardimg();
        if (cardimg != null) {
            stmt.bindString(25, cardimg);
        }
 
        String docNo = entity.getDocNo();
        if (docNo != null) {
            stmt.bindString(26, docNo);
        }
 
        String flowerNumber = entity.getFlowerNumber();
        if (flowerNumber != null) {
            stmt.bindString(27, flowerNumber);
        }
 
        String lastAsk = entity.getLastAsk();
        if (lastAsk != null) {
            stmt.bindString(28, lastAsk);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(29, status);
        }
 
        String regFee = entity.getRegFee();
        if (regFee != null) {
            stmt.bindString(30, regFee);
        }
 
        String appointmentFlag = entity.getAppointmentFlag();
        if (appointmentFlag != null) {
            stmt.bindString(31, appointmentFlag);
        }
 
        String appointmentTimes = entity.getAppointmentTimes();
        if (appointmentTimes != null) {
            stmt.bindString(32, appointmentTimes);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // askNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // department
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // district
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // educationTitle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // helpCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hospital
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // province
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // qaCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // qrCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // role
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // score
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // title
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // workYear
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // phone
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sex
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // birth
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // experience
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // good
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // doccard
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // cardimg
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // docNo
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // flowerNumber
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // lastAsk
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // status
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // regFee
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // appointmentFlag
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // appointmentTimes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAskNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDistrict(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEducationTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHelpCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHospital(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProvince(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQaCount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQrCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRole(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setScore(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTitle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWorkYear(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhone(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSex(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBirth(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setExperience(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGood(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDoccard(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCardimg(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDocNo(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFlowerNumber(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLastAsk(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setStatus(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRegFee(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAppointmentFlag(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAppointmentTimes(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
