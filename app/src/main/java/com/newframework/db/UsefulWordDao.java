package com.newframework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USEFUL_WORD".
*/
public class UsefulWordDao extends AbstractDao<UsefulWord, String> {

    public static final String TABLENAME = "USEFUL_WORD";

    /**
     * Properties of entity UsefulWord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WordId = new Property(0, String.class, "wordId", true, "WORD_ID");
        public final static Property UsefulWord = new Property(1, String.class, "usefulWord", false, "USEFUL_WORD");
        public final static Property DocId = new Property(2, String.class, "docId", false, "DOC_ID");
        public final static Property UseCount = new Property(3, int.class, "useCount", false, "USE_COUNT");
    }


    public UsefulWordDao(DaoConfig config) {
        super(config);
    }
    
    public UsefulWordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USEFUL_WORD\" (" + //
                "\"WORD_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: wordId
                "\"USEFUL_WORD\" TEXT," + // 1: usefulWord
                "\"DOC_ID\" TEXT," + // 2: docId
                "\"USE_COUNT\" INTEGER NOT NULL );"); // 3: useCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USEFUL_WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsefulWord entity) {
        stmt.clearBindings();
 
        String wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindString(1, wordId);
        }
 
        String usefulWord = entity.getUsefulWord();
        if (usefulWord != null) {
            stmt.bindString(2, usefulWord);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(3, docId);
        }
        stmt.bindLong(4, entity.getUseCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsefulWord entity) {
        stmt.clearBindings();
 
        String wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindString(1, wordId);
        }
 
        String usefulWord = entity.getUsefulWord();
        if (usefulWord != null) {
            stmt.bindString(2, usefulWord);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(3, docId);
        }
        stmt.bindLong(4, entity.getUseCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UsefulWord readEntity(Cursor cursor, int offset) {
        UsefulWord entity = new UsefulWord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // wordId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // usefulWord
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // docId
            cursor.getInt(offset + 3) // useCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsefulWord entity, int offset) {
        entity.setWordId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsefulWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDocId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUseCount(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UsefulWord entity, long rowId) {
        return entity.getWordId();
    }
    
    @Override
    public String getKey(UsefulWord entity) {
        if(entity != null) {
            return entity.getWordId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UsefulWord entity) {
        return entity.getWordId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
