package com.newframework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRUGS".
*/
public class DrugsDao extends AbstractDao<Drugs, String> {

    public static final String TABLENAME = "DRUGS";

    /**
     * Properties of entity Drugs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CommonName = new Property(1, String.class, "commonName", false, "COMMON_NAME");
        public final static Property DrugName = new Property(2, String.class, "drugName", false, "DRUG_NAME");
        public final static Property Amount = new Property(3, String.class, "amount", false, "AMOUNT");
        public final static Property PinyingCode = new Property(4, String.class, "pinyingCode", false, "PINYING_CODE");
    }


    public DrugsDao(DaoConfig config) {
        super(config);
    }
    
    public DrugsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRUGS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"COMMON_NAME\" TEXT," + // 1: commonName
                "\"DRUG_NAME\" TEXT," + // 2: drugName
                "\"AMOUNT\" TEXT," + // 3: amount
                "\"PINYING_CODE\" TEXT);"); // 4: pinyingCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRUGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Drugs entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(2, commonName);
        }
 
        String drugName = entity.getDrugName();
        if (drugName != null) {
            stmt.bindString(3, drugName);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String pinyingCode = entity.getPinyingCode();
        if (pinyingCode != null) {
            stmt.bindString(5, pinyingCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Drugs entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(2, commonName);
        }
 
        String drugName = entity.getDrugName();
        if (drugName != null) {
            stmt.bindString(3, drugName);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String pinyingCode = entity.getPinyingCode();
        if (pinyingCode != null) {
            stmt.bindString(5, pinyingCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Drugs readEntity(Cursor cursor, int offset) {
        Drugs entity = new Drugs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commonName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // drugName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pinyingCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Drugs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCommonName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDrugName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyingCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Drugs entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Drugs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Drugs entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
